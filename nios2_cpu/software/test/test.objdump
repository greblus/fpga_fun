
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000264 memsz 0x00000264 flags r-x
    LOAD off    0x00001284 vaddr 0x00002284 paddr 0x00002288 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000128c vaddr 0x0000228c paddr 0x0000228c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000024c  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0000226c  0000226c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00002284  00002288  00001284  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  0000228c  0000228c  0000128c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  000012b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b53  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000692  00000000  00000000  00001f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000801  00000000  00000000  000025fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000178  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ff  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000019f  00000000  00000000  00003477  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  00003618  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000078  00000000  00000000  00003628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00004384  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  00004387  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00004393  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00004394  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  00004395  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  000043ab  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000005  00000000  00000000  000043b6  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000020  00000000  00000000  000043bb  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00026b1b  00000000  00000000  000043db  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
0000226c l    d  .rodata	00000000 .rodata
00002284 l    d  .rwdata	00000000 .rwdata
0000228c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
00002178 g     F .text	0000002c alt_main
00002288 g       *ABS*	00000000 __flash_rwdata_start
000021a4 g     F .text	00000038 alt_putstr
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002290 g     O .bss	00000004 alt_argv
0000a284 g       *ABS*	00000000 _gp
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002298 g       *ABS*	00000000 __bss_end
00002234 g     F .text	00000004 alt_dcache_flush_all
00002288 g       *ABS*	00000000 __ram_rwdata_end
00002284 g       *ABS*	00000000 __ram_rodata_end
00002284 g     O .rwdata	00000004 jtag_uart_0
00002298 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002200 g     F .text	00000034 altera_avalon_jtag_uart_write
00002020 g     F .text	0000003c _start
000021fc g     F .text	00000004 alt_sys_init
00002284 g       *ABS*	00000000 __ram_rwdata_start
0000226c g       *ABS*	00000000 __ram_rodata_start
00002298 g       *ABS*	00000000 __alt_stack_base
0000228c g       *ABS*	00000000 __bss_start
0000205c g     F .text	00000018 main
0000228c g     O .bss	00000004 alt_envp
0000226c g       *ABS*	00000000 __flash_rodata_start
000021dc g     F .text	00000020 alt_irq_init
00002294 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002288 g       *ABS*	00000000 _edata
00002298 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
0000223c g     F .text	00000008 altera_nios2_qsys_irq_init
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002244 g     F .text	00000028 strlen
00002238 g     F .text	00000004 alt_icache_flush_all
00002074 g     F .text	00000104 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a8a114 	ori	gp,gp,41604
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	1088a314 	ori	r2,r2,8844

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c8a614 	ori	r3,r3,8856

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00020740 	call	2074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00021780 	call	2178 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <alt_after_alt_main>

0000205c <main>:
 */

#include "sys/alt_stdio.h"

int main()
{ 
    205c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    2060:	01000034 	movhi	r4,0
    2064:	21089b04 	addi	r4,r4,8812
 */

#include "sys/alt_stdio.h"

int main()
{ 
    2068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    206c:	00021a40 	call	21a4 <alt_putstr>
    2070:	003fff06 	br	2070 <main+0x14>

00002074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2074:	deffff04 	addi	sp,sp,-4
    2078:	dfc00015 	stw	ra,0(sp)
    207c:	00c00034 	movhi	r3,0
    2080:	18c8a104 	addi	r3,r3,8836
    2084:	01000034 	movhi	r4,0
    2088:	2108a204 	addi	r4,r4,8840

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    208c:	1900061e 	bne	r3,r4,20a8 <alt_load+0x34>
    2090:	00c00034 	movhi	r3,0
    2094:	18c80804 	addi	r3,r3,8224
    2098:	01000034 	movhi	r4,0
    209c:	21080804 	addi	r4,r4,8224
    20a0:	1900151e 	bne	r3,r4,20f8 <alt_load+0x84>
    20a4:	00000e06 	br	20e0 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    20a8:	01400034 	movhi	r5,0
    20ac:	2948a204 	addi	r5,r5,8840
    20b0:	00bfff04 	movi	r2,-4
    20b4:	28cbc83a 	sub	r5,r5,r3
    20b8:	288a703a 	and	r5,r5,r2
    20bc:	0005883a 	mov	r2,zero
    20c0:	00000506 	br	20d8 <alt_load+0x64>
    20c4:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    20c8:	39c00017 	ldw	r7,0(r7)
    20cc:	188d883a 	add	r6,r3,r2
    20d0:	10800104 	addi	r2,r2,4
    20d4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    20d8:	117ffa1e 	bne	r2,r5,20c4 <alt_load+0x50>
    20dc:	003fec06 	br	2090 <alt_load+0x1c>
    20e0:	00c00034 	movhi	r3,0
    20e4:	18c89b04 	addi	r3,r3,8812
    20e8:	01000034 	movhi	r4,0
    20ec:	21089b04 	addi	r4,r4,8812

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    20f0:	1900131e 	bne	r3,r4,2140 <alt_load+0xcc>
    20f4:	00000e06 	br	2130 <alt_load+0xbc>
    20f8:	01400034 	movhi	r5,0
    20fc:	29480804 	addi	r5,r5,8224
    2100:	00bfff04 	movi	r2,-4
    2104:	28cbc83a 	sub	r5,r5,r3
    2108:	288a703a 	and	r5,r5,r2
    210c:	0005883a 	mov	r2,zero
    2110:	00000506 	br	2128 <alt_load+0xb4>
    2114:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    2118:	39c00017 	ldw	r7,0(r7)
    211c:	188d883a 	add	r6,r3,r2
    2120:	10800104 	addi	r2,r2,4
    2124:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2128:	117ffa1e 	bne	r2,r5,2114 <alt_load+0xa0>
    212c:	003fec06 	br	20e0 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2130:	00022340 	call	2234 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2134:	dfc00017 	ldw	ra,0(sp)
    2138:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    213c:	00022381 	jmpi	2238 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    2140:	01400034 	movhi	r5,0
    2144:	2948a104 	addi	r5,r5,8836
    2148:	00bfff04 	movi	r2,-4
    214c:	28cbc83a 	sub	r5,r5,r3
    2150:	288a703a 	and	r5,r5,r2
    2154:	0005883a 	mov	r2,zero
    2158:	00000506 	br	2170 <alt_load+0xfc>
    215c:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    2160:	39c00017 	ldw	r7,0(r7)
    2164:	188d883a 	add	r6,r3,r2
    2168:	10800104 	addi	r2,r2,4
    216c:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2170:	117ffa1e 	bne	r2,r5,215c <alt_load+0xe8>
    2174:	003fee06 	br	2130 <alt_load+0xbc>

00002178 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2178:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    217c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2180:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2184:	00021dc0 	call	21dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2188:	00021fc0 	call	21fc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    218c:	d1200417 	ldw	r4,-32752(gp)
    2190:	d1600317 	ldw	r5,-32756(gp)
    2194:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2198:	dfc00017 	ldw	ra,0(sp)
    219c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    21a0:	000205c1 	jmpi	205c <main>

000021a4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    21a4:	defffe04 	addi	sp,sp,-8
    21a8:	dc000015 	stw	r16,0(sp)
    21ac:	dfc00115 	stw	ra,4(sp)
    21b0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    21b4:	00022440 	call	2244 <strlen>
    21b8:	01000034 	movhi	r4,0
    21bc:	2108a104 	addi	r4,r4,8836
    21c0:	800b883a 	mov	r5,r16
    21c4:	100d883a 	mov	r6,r2
    21c8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    21cc:	dfc00117 	ldw	ra,4(sp)
    21d0:	dc000017 	ldw	r16,0(sp)
    21d4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    21d8:	00022001 	jmpi	2200 <altera_avalon_jtag_uart_write>

000021dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    21dc:	deffff04 	addi	sp,sp,-4
    21e0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    21e4:	000223c0 	call	223c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    21e8:	00800044 	movi	r2,1
    21ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    21f0:	dfc00017 	ldw	ra,0(sp)
    21f4:	dec00104 	addi	sp,sp,4
    21f8:	f800283a 	ret

000021fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    21fc:	f800283a 	ret

00002200 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2200:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    2204:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    2208:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    220c:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    2210:	00000606 	br	222c <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    2214:	31c00037 	ldwio	r7,0(r6)
    2218:	39ffffec 	andhi	r7,r7,65535
    221c:	383ffd26 	beq	r7,zero,2214 <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    2220:	29c00007 	ldb	r7,0(r5)
    2224:	29400044 	addi	r5,r5,1
    2228:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    222c:	293ff936 	bltu	r5,r4,2214 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    2230:	f800283a 	ret

00002234 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2234:	f800283a 	ret

00002238 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2238:	f800283a 	ret

0000223c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    223c:	000170fa 	wrctl	ienable,zero
    2240:	f800283a 	ret

00002244 <strlen>:
    2244:	20800007 	ldb	r2,0(r4)
    2248:	10000626 	beq	r2,zero,2264 <strlen+0x20>
    224c:	2005883a 	mov	r2,r4
    2250:	10800044 	addi	r2,r2,1
    2254:	10c00007 	ldb	r3,0(r2)
    2258:	183ffd1e 	bne	r3,zero,2250 <strlen+0xc>
    225c:	1105c83a 	sub	r2,r2,r4
    2260:	f800283a 	ret
    2264:	0005883a 	mov	r2,zero
    2268:	f800283a 	ret
